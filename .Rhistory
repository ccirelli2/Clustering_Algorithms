df.d = data.frame(p.x, p.y)
# Generate Data Points For K Centroids
df.c <- f.centroids(num.centroids)
for (i in seq(1, num.iters)){
# Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
print(paste('Iteration =>', i))
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 2)
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate A Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Generate Data Points For K Centroids
df.c <- f.centroids(num.centroids)
for (i in seq(1, num.iters)){
# Print User Log
print(paste('Starting Iteration =>', i))
# Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
# Set Delay between iterations
Sys.sleep(2)
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 4)
# Clear Namespace
rm(list=ls())
# Import Libraries
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
print(head(df.c.assignments))
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# e.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
# f.  Set Delay between iterations
Sys.sleep(2)
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 4)
# CLEAR NAME SPACE
rm(list=ls())
# IMPORT LIBRARIES
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
print(head(df.c.assignments))
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# e.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
# f.  Set Delay between iterations
Sys.sleep(2)
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 2)
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# e.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
# f.  Set Delay between iterations
Sys.sleep(2)
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 2)
# Calculate Mean Squared Error By Centroid + The Entire System
'1.) Sum the MSE within each cluster
2.) Sum the MSE for each cluster.'
calc.mse <- function(df.c.assignments){
centroid.list <- unique(df.c.assignments$centroid.min.dist)
inner.mse     <- c()
outer.mse     <- ''
# Iterate Over Length of Num Centroids
for (i in seq(1, length(centroid.list))){
# Obtain ith Centroid From Centroid List
i.centroid  <- centroid.list[i]
# Find Rows where assignment centroid
subset.i    <- df.c.assignments$centroid.min.dist == i.centroid
# Subset Data Frame Where Assignment == centroid.i
df.sub      <- df.c.assignments[subset.i,]
# Calculate MSE Mean X, Y Coordinates / Assign to Vectors
}
# Create New df.c (data frame containing centroid coordinates)
df.c        <- data.frame(c.x, c.y, centroid)
# Return New df.c Data Frame
return(df.c)
}
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# e.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
# f.  Set Delay between iterations
Sys.sleep(2)
}
}
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# e.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
# f.  Set Delay between iterations
Sys.sleep(2)
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 2)
# CLEAR NAME SPACE
rm(list=ls())
# IMPORT LIBRARIES
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# e.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
# f.  Set Delay between iterations
Sys.sleep(2)
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 2)
# CLEAR NAME SPACE
rm(list=ls())
# IMPORT LIBRARIES
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# e.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
# f.  Set Delay between iterations
Sys.sleep(2)
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 2)
list.centroids <- c('c.1', 'c.3', 'c.4', 'c.2')
sort(list.centroids)
calc.mse <- function(df.c.assignments){
centroid.list <- sort(unique(df.c.assignments$centroid.min.dist))
inner.mse     <- c()
# Iterate Over Length of Num Centroids
for (i in seq(1, length(centroid.list))){
# Obtain ith Centroid From Centroid List
i.centroid  <- centroid.list[i]
# Find Rows where assignment centroid
subset.i    <- df.c.assignments$centroid.min.dist == i.centroid
# Subset Data Frame Where Assignment == centroid.i
df.sub      <- df.c.assignments[subset.i,]
# Calculate MSE Mean X, Y Coordinates / Assign to Vectors
'Lets try to use the num of iteration to identify the correct column.
Since we now have a sorted list of centroids we know that col 3 will always
be c.1 and after that c.1 + n'
inner.mse <- c(inner.mse, sum(df.sub[ , 2 + i]))
}
# Calculate Total MSE
outer.mse <- sum(inner.mse)
# Return Outer MSE
return(outer.mse)
}
# CLEAR NAME SPACE
rm(list=ls())
# IMPORT LIBRARIES
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# CLEAR NAME SPACE
rm(list=ls())
# IMPORT LIBRARIES
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# e.  Calculate the within and between cluster mse
sys.mse <- calc.mse(df.c.assignments)
print(paste('MSE => ', sys.mse))
# f.  Set Delay between iterations
Sys.sleep(2)
# g.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 2)
# CLEAR NAME SPACE
rm(list=ls())
# IMPORT LIBRARIES
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c)
# e.  Calculate the within and between cluster mse
sys.mse <- round(calc.mse(df.c.assignments),2)
print(paste('MSE => ', sys.mse))
# f.  Set Delay between iterations
Sys.sleep(2)
# g.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
}
}
k.means(num.data.points = 100,
num.centroids   = 4,
num.iters       = 4)
k.means(num.data.points = 200,
num.centroids   = 4,
num.iters       = 6)
k.means(num.data.points = 200,
num.centroids   = 4,
num.iters       = 10)
# CLEAR NAME SPACE
rm(list=ls())
# IMPORT LIBRARIES
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c, i)
# e.  Calculate the within and between cluster mse
sys.mse <- round(calc.mse(df.c.assignments),2)
print(paste('MSE => ', sys.mse))
# f.  Set Delay between iterations
Sys.sleep(2)
# g.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
}
}
k.means(num.data.points = 200,
num.centroids   = 4,
num.iters       = 10)
# CLEAR NAME SPACE
rm(list=ls())
# IMPORT LIBRARIES
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# CLEAR NAME SPACE
rm(list=ls())
# IMPORT LIBRARIES
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# DRIVER FUNCTION - K MEANS CLUSTER--------------------------------------------------
k.means <- function(num.data.points, num.centroids, num.iters){
# Step 1:  Generate Random Dataset
set.seed(7)
p.x = runif(num.data.points, min = 0, max = 10)
p.y = runif(num.data.points, min = 0, max = 10)
# Step 2:  Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Step 3:  Generate Random Data Points For K Centroids
df.c <- f.centroids(num.centroids)
# Step4:   Iterate N times each time recalculating the centroids
for (i in seq(1, num.iters)){
# a.  Print User Log
print(paste('Starting Iteration =>', i))
# b.  Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# c.  Create Assignments Based on Distance to Nearest Centroid
df.c.assignments <- c.assignments(df.d.c.dist)
# d.  Plot The Assignment of Each Point & Centroid
plot.c.assignments(df.c.assignments, df.c, i)
# e.  Calculate the within and between cluster mse
sys.mse <- round(calc.mse(df.c.assignments),2)
print(paste('MSE => ', sys.mse))
# f.  Set Delay between iterations
Sys.sleep(2)
# g.  Recalculate Centroids
df.c <- re.calc.centroids(df.c.assignments)
}
}
k.means(num.data.points = 200,
num.centroids   = 4,
num.iters       = 10)
k.means(num.data.points = 200,
num.centroids   = 2,
num.iters       = 10)
k.means(num.data.points = 200,
num.centroids   = 2,
num.iters       = 3)
k.means(num.data.points = 300,
num.centroids   = 4,
num.iters       = 5)
k.means(num.data.points = 300,
num.centroids   = 4,
num.iters       = 5)
k.means(num.data.points = 300,
num.centroids   = 4,
num.iters       = 6)
