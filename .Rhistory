# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
cx.1 = c.x[1]
cy.1 = c.y[1]
plot(cx.1, cy.1)
cx.1
# Centroid 2
cx.2 = c.x[2]
cy.2 = c.y[2]
plot(cx.2, cy.2)
c.x
c.y
plot(c.x, c.y)
plot(x.1, y.1)
# Create DataFrame with X & Y Values
df.1 = data.frame(x.1, y.1)
p <- ggplot(df.1, aes(x = x.1, y = y.1))
# Create Your Own Kmeans Algorithm
rm(list=ls())
# Import Libraries
library(ggplot2)
# Step 1:  Generate two random datasets (R2)
set.seed(7)
x.1 = runif(100, min = 0, max = 10)
y.1 = runif(100, min = 0, max = 10)
plot(x.1, y.1)
# Create DataFrame with X & Y Values
df.1 = data.frame(x.1, y.1)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
cx.1 = c.x[1]
cy.1 = c.y[1]
plot(c.x, c.y)
# Centroid 2
cx.2 = c.x[2]
cy.2 = c.y[2]
plot(cx.2, cy.2)
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = x.1, y = y.1))
p
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = x.1, y = y.1)) + geom_point()
p
df.2 = data.frame(cx.1, cy.1)
df.2 = data.frame(cx.1, cy.1)
df.3 = data.frame(cx.2, cy.2)
p + geom_point(df.2, colour = 'red', size = 10)
p + geom_point(df.2, aes(x = cx.1, y = cy.1), colour = 'red', size = 10)
p + geom_point(df.2, aes(x = cx.1, y = cy.1))
df.2 = data.frame(cx.1, cy.1)
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = x.1, y = y.1)) + geom_point()
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1))
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red')
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =10)
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5)
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5) + geom_text('C1')
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5) + geom_text(label = 'C1')
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5, label = 'C1')
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5, label = 'C1')
p <- ggplot(df.1, aes(x = x.1, y = y.1)) + geom_point()
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5) +
geom_point(data = df.3, aes(x = cx.2, y = cy.2), colour = 'blue', size =5)
a = (x2 - x1)^2
b = (y2 - y1)^2
c = sqrt(a + b)
a = (x2 - x1)^2
b = (y2 - y1)^2
e.distance <- function(x1, y1, x2, y2){
a = (x2 - x1)^2
b = (y2 - y1)^2
c = sqrt(a + b)
return(c)
}
e.dist.c1 = e.distance(x.1, cx.1, y.1, cy.1)
e.dist.c1
e.dist.c1 = e.distance(cx.1, x.1, cy.1, y.1)
e.dist.c1
e.dist.c2 = e.distance(cx.2, x.1, cy.2, y.1)
# Create DataFrame w/ x/y points, distance to c1, c2
df.1 = data.frame(x.1, y.1, e.dist.c1, e.dist.c2)
df.1
# Create DataFrame w/ x/y points, distance to c1, c2
comp.dist = e.dist.c1 > e.dist.c2
df.1 = data.frame(x.1, y.1, e.dist.c1, e.dist.c2, comp.dist)
df.1
e.distance <- function(p.x, c.x, p.y, c.y){
'p.x/p.y:  Randomly generated x/y points
c.x/c.y:  Centroid x & y coordinates'
a = (p.x - c.x)^2
b = (p.y - c.y)^2
c = sqrt(a + b)
return(c)
}
# Clear Namespace
rm(list=ls())
# Import Libraries
library(ggplot2)
# Import Libraries
library(ggplot2)
# Step 1:  Generate two random datasets (R2)
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
# Create DataFrame with X & Y Values
df.1 = data.frame(x.1, y.1)
# Create DataFrame with X & Y Values
df.1 = data.frame(p.x, p.y)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
c.x
c.y
# Centroid 1
cx.1 = c.x[1]
cy.1 = c.y[1]
df.2 = data.frame(cx.1, cy.1)
plot(c.x, c.y)
# Create DataFrame with X & Y Values
df.pxy = data.frame(p.x, p.y)
df.c1.xy
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
c1.x = c.x[1]
c1.y. = c.y[1]
# Centroid 2
c2.x = c.x[2]
c2.y = c.y[2]
df.c1 = data.frame(c1.x, c1.y)
c1.y = c.y[1]
df.c1 = data.frame(c1.x, c1.y)
df.c2 = data.frame(c2.x, c2.y)
p <- ggplot(df.1, aes(x = x.1, y = y.1)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
p <- ggplot(df.1, aes(x = p.x, y = p.y)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
# Clear Namespace
rm(list=ls())
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
df.pxy = data.frame(p.x, p.y)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
c1.x = c.x[1]
c1.y = c.y[1]
df.c1 = data.frame(c1.x, c1.y)
# Centroid 2
c2.x = c.x[2]
c2.y = c.y[2]
df.c2 = data.frame(c2.x, c2.y)
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = p.x, y = p.y)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = p.x, y = p.y)) + geom_point()
# Plot Random Data + Centroids
p <- ggplot(df.pxy, aes(x = p.x, y = p.y)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
e.distance <- function(p.x, c.x, p.y, c.y){
'p.x/p.y:  Randomly generated x/y points
c.x/c.y:  Centroid x & y coordinates'
a = (p.x - c.x)^2
b = (p.y - c.y)^2
c = sqrt(a + b)
return(c)
}
e.distance <- function(p.x, p.y, c.x, c.y){
'p.x/p.y:  Randomly generated x/y points
c.x/c.y:  Centroid x & y coordinates'
a = (p.x - c.x)^2
b = (p.y - c.y)^2
c = sqrt(a + b)
return(c)
}
e.dist.c1 = e.distance(p.x, p.y, c1.x, c1.y)
e.dist.c1 = e.distance(p.x, p.y, c1.x, c1.y)
e.dist.c2 = e.distance(p.x, p.y, c2.x, c2.y)
# Create DataFrame w/ x/y points, distance to c1, c2
comp.dist = e.dist.c1 > e.dist.c2
df.comp = data.frame(x.1, y.1, e.dist.c1, e.dist.c2, comp.dist)
df.comp = data.frame(p.x, p.y, e.dist.c1, e.dist.c2, comp.dist)
df.comp
comp.dist.true = c()
test.1 = df.comp[comp.dist] == TRUE
test.1 = df.comp['comp.dist'] == TRUE
test.1
df.comp
df.comp['comp.dist' == TRUE]
# Create DataFrame w/ x/y points, distance to c1, c2
comp.dist = e.dist.c1 > e.dist.c2
df.comp = data.frame(p.x, p.y, e.dist.c1, e.dist.c2, comp.dist)
df.comp[comp.dist]
df.comp['comp.dist']
df.comp['comp.dist'] = TRUE <- 'C2'
df.comp['comp.dist'] == TRUE <- 'C2'
df.comp['comp.dist' == TRUE] <- 'C2'
df.comp
df.comp['comp.dist' == TRUE] <- 'C2'
df.comp
test = df.comp['comp.dist' == TRUE] <- 'C2'
test
df.comp[comp.dist] = TRUE
df.comp['comp.dist'] == TRUE
df.comp
df.comp['new'] <- 'C2' if df.com['comp.dist' == TRUE]
df.comp['new'] <- 'C2' if (df.com['comp.dist' == TRUE])
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C1'
df.comp
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C2'
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C1'
df.comp
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C2'
df.comp$comp.dist[df.comp$comp.dist == FALSE] <- 'C1'
df.comp
# Clear Namespace
rm(list=ls())
# Import Libraries
library(ggplot2)
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
# Create DataFrame with X & Y Values
df.pxy = data.frame(p.x, p.y)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
c1.x = c.x[1]
c1.y = c.y[1]
df.c1 = data.frame(c1.x, c1.y)
# Centroid 2
c2.x = c.x[2]
c2.y = c.y[2]
df.c2 = data.frame(c2.x, c2.y)
# Plot Random Data + Centroids
p <- ggplot(df.pxy, aes(x = p.x, y = p.y)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
# Calculate Euclidean Distance to Each Centroid
e.distance <- function(p.x, p.y, c.x, c.y){
'p.x/p.y:  Randomly generated x/y points
c.x/c.y:  Centroid x & y coordinates'
a = (p.x - c.x)^2
b = (p.y - c.y)^2
c = sqrt(a + b)
return(c)
}
e.dist.c1 = e.distance(p.x, p.y, c1.x, c1.y)
e.dist.c2 = e.distance(p.x, p.y, c2.x, c2.y)
# Create DataFrame w/ x/y points, distance to c1, c2
comp.dist = e.dist.c1 > e.dist.c2
df.comp = data.frame(p.x, p.y, e.dist.c1, e.dist.c2, comp.dist)
df.comp
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C2'
df.comp$comp.dist[df.comp$comp.dist == FALSE] <- 'C1'
df.comp
p <- ggplot(df.comp[df.comp$comp.dist == 'C1'], aes(x = p.x, y = p.y)) + geom_point()
p <- ggplot(df.comp[df.comp$comp.dist == 'C1'], aes(x = p.x, y = p.y)) + geom_point()
# Clear Namespace
rm(list=ls())
# Import Libraries
library(ggplot2)
rm(list=ls())
# Import Libraries
library(ggplot2)
# Step 1:  Generate two random datasets (R2)
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
# Create DataFrame with X & Y Values
df.pxy = data.frame(p.x, p.y)
plot(df.pxy)
# Centroid 1
c1.x = runif(1, min = 5, max = 10)
c1.y = runif(1, min = 5, max = 10)
df.c1 = data.frame(c1.x, c1.y)
df.c1
# Centroid 2
c2.x = runif(1, min = 0, max = 5)
c2.y = runif(1, min = 0, max = 5)
df.c2 = data.frame(c2.x, c2.y)
df.c2
rm(list=ls())
# Import Libraries
library(ggplot2)
# Step 1:  Generate A Random Dataset
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
# Create DataFrame with X & Y Values
df.pxy = data.frame(p.x, p.y)
plot(df.pxy)
head(df.pxy)
# Clear Namespace
rm(list=ls())
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# Step 1:  Generate A Random Dataset
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
# Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Generate Data Points For K Centroids
df.c <- f.centroids(4)
# Initial Scatter Plot w/ Centroids
p.1 <- ggplot(df.d, aes(x = p.x, y = p.y)) + geom_point() +
geom_point(data=df.c, aes(x=df.c$x, y=df.c$y), colour='red', size=5) +
ggtitle('Initial Plot - Data Cloud + Centroids')
p.1
df.d.c.dist <- get.euclid.dist(df.d, df.c)
# Create Assignments Based on Distance to Nearest Centroid
'Steps:
1.) Iterate each row
2.) Determine which dist is the min
3.) Add a single col with the name of the centroid that represnts the min dist
4.) Return data frame with new col w/ centroid name
'
df.c.assignments <- c.assignments(df.d.c.dist)
# Plot Function
plot.c.assignments <- function(df.c.assignments, df.c){
'Inputs:      df.c.assignments - dataframe that includes our data cloud plus assignments
df.c             - original coordinates for centroids.
Output:      tbd.  Plot
'
# Step1:  Determine how many centroid groups we have
names.c <- as.vector(unique(df.c.assignments$centroid.min.dist))
# Step2:  Limit dataframe to only x,y values & centroid assignments (dplyr has select f)
df.xy.c <- select(df.c.assignments, p.x, p.y, centroid.min.dist)
# Step3:  Isolate x,y values for centroids
df.c    <- select(df.c.assignments, names.c)
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, color = centroid.min.dist)) + geom_point()
# Generate Plot
p
}
plot.c.assignments(df.c.assignments, df.c)
tion
plot.c.assignments <- function(df.c.assignments, df.c){
'Inputs:      df.c.assignments - dataframe that includes our data cloud plus assignments
df.c             - original coordinates for centroids.
Output:      tbd.  Plot
'
# Step1:  Determine how many centroid groups we have
names.c <- as.vector(unique(df.c.assignments$centroid.min.dist))
# Step2:  Limit dataframe to only x,y values & centroid assignments (dplyr has select f)
df.xy.c <- select(df.c.assignments, p.x, p.y, centroid.min.dist)
# Step3:  Isolate x,y values for centroids
df.c    <- select(df.c.assignments, names.c)
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, color = centroid.min.dist)) + geom_point()
# Generate Plot
return(p)
}
plot.c.assignments(df.c.assignments, df.c)
print(plot.c.assignments(df.c.assignments, df.c))
print(plot.c.assignments(df.c.assignments, df.c))
plot.c.assignments <- function(df.c.assignments, df.c){
'Inputs:      df.c.assignments - dataframe that includes our data cloud plus assignments
df.c             - original coordinates for centroids.
Output:      tbd.  Plot
'
# Step1:  Determine how many centroid groups we have
names.c <- as.vector(unique(df.c.assignments$centroid.min.dist))
# Step2:  Limit dataframe to only x,y values & centroid assignments (dplyr has select f)
df.xy.c <- select(df.c.assignments, p.x, p.y, centroid.min.dist)
# Step3:  Isolate x,y values for centroids
df.c    <- select(df.c.assignments, names.c)
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, color = names.c)) + geom_point()
# Generate Plot
return(p)
}
print(plot.c.assignments(df.c.assignments, df.c))
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, color = centroid.min.dist)) + geom_point()
names.c <- as.vector(unique(df.c.assignments$centroid.min.dist))
# Step2:  Limit dataframe to only x,y values & centroid assignments (dplyr has select f)
df.xy.c <- select(df.c.assignments, p.x, p.y, centroid.min.dist)
# Step3:  Isolate x,y values for centroids
df.c    <- select(df.c.assignments, names.c)
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, color = centroid.min.dist)) + geom_point()
p
names.c
head(df.xy.c)
df.c
# Step3:  Isolate x,y values for centroids
df.c    <- select(df.c, names.c)
df.c
# Step3:  Isolate x,y values for centroids
df.c
# Clear Namespace
rm(list=ls())
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
# Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Generate Data Points For K Centroids
df.c <- f.centroids(4)
df.c
# Step3:  Isolate x,y values for centroids
df.c
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, color = centroid.min.dist)) + geom_point()
# Step2:  Limit dataframe to x,y values & centroid assignments (dplyr has select f)
df.xy.c <- select(df.c.assignments, p.x, p.y, centroid.min.dist)
names.c <- as.vector(unique(df.c.assignments$centroid.min.dist))
# Step2:  Limit dataframe to x,y values & centroid assignments (dplyr has select f)
df.xy.c <- select(df.c.assignments, p.x, p.y, centroid.min.dist)
p.1 <- ggplot(df.d, aes(x = p.x, y = p.y)) + geom_point() +
geom_point(data=df.c, aes(x=df.c$x, y=df.c$y), colour='red', size=5) +
ggtitle('Initial Plot - Data Cloud + Centroids')
p.1
# Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
df.c.assignments <- c.assignments(df.d.c.dist)
df.c.assignments <- c.assignments(df.d.c.dist)
# Clear Namespace
rm(list=ls())
# Import Libraries
library(ggplot2)
library(dplyr)
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms')
source('module1_kmeans_algorithm.R')
# Step 1:  Generate A Random Dataset
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
# Create DataFrame with X & Y Values
df.d = data.frame(p.x, p.y)
# Generate Data Points For K Centroids
df.c <- f.centroids(4)
# Initial Scatter Plot w/ Centroids
p.1 <- ggplot(df.d, aes(x = p.x, y = p.y)) + geom_point() +
geom_point(data=df.c, aes(x=df.c$x, y=df.c$y), colour='red', size=5) +
ggtitle('Initial Plot - Data Cloud + Centroids')
p.1
# Calculate Euclidean Distance 2 Each Centroid
df.d.c.dist <- get.euclid.dist(df.d, df.c)
df.c.assignments <- c.assignments(df.d.c.dist)
# Step2:  Limit dataframe to x,y values & centroid assignments (dplyr has select f)
df.xy.c <- select(df.c.assignments, p.x, p.y, centroid.min.dist)
head(df.xy.c)
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, color = centroid.min.dist)) + geom_point()
p
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y)) + geom_point()
p
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, color='centroid.min.dist')) + geom_point()
p
?ggplot
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, color=centroid.min.dist)) + geom_point()
p
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, colour=centroid.min.dist)) + geom_point()
p
# Generate Plots
p <- ggplot(df.xy.c, aes(x = p.x, y = p.y, colour='red')) + geom_point()
p
head(df.xy.c)
# Generate Plots
p.2 <- ggplot(data=df.xy.c, aes(x=p.x, y=p.y)) + geom_point()
p.2
# Generate Plots
p.2 <- ggplot(data=df.xy.c, aes(x=p.x, y=p.y, color=centroid.min.dist)) + geom_point()
p.2
# Generate Plots
p.2 <- ggplot(data=df.xy.c, aes(x=p.x, y=p.y)) + geom_point()
p.2
df.c
p.2 <- ggplot(data=df.xy.c, aes(x=p.x, y=p.y)) + geom_point() +
geom_point(data=df.c, aes(x=x, y=y, color='red', size=5))
p.2
p.2 <- ggplot(data=df.xy.c, aes(x=p.x, y=p.y)) +
geom_point(data=df.c, aes(x=x, y=y, color='red', size=5))
p.2
df.c
