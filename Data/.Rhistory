# Create DataFrame to House Values & Assignments
c.x.1[2]
# Create DataFrame to House Values & Assignments
c.x.1[2]
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
cx.1 = c.x[1]
cy.1 = c.y[1]
cx.2 = c.x[2]
cy.2 = c.y[2]
# Create DataFrame to House Values & Assignments
x.1 - cx.1
# Create DataFrame to House Values & Assignments
var.x1.c1 = (x.1 - cx.1)^2
# Create DataFrame to House Values & Assignments
var.x1.c1 = sum((x.1 - cx.1)^2)
var.x1.c1
# Create DataFrame to House Values & Assignments
var.x1.c1 = (x.1 - cx.1)^2
var.x1.c2 = (x.1 - cx.2)^2
var.x1.c1 < var.x1.c2
e.dist <- function(x1, x2, y1, y2){
a <- (x2 - x1)^2
b <- (y2 - y1)^2
c <- sqrt(a + b)
return(c)
}
e.dist(x.1, cx.1, y.1, cy.1)
dist.c1 = e.dist(x.1, cx.1, y.1, cy.1)
dist.c2 = e.dist(x.1, cx.2, y.1, cy.2)
dist.c1 < dist.c2
d.c1.vs.c2 = dist.c1 < dist.c2
test = ifelse(x == TRUE, 'A', 'B')
test = ifelse(TRUE, 'A', 'B')
test
d.c1.vs.c2[dist.c1 < dist.c2] = 'C1'
d.c1.vs.c2
assignment.1 = [dist.c1 < dist.c2] = 'C1'
assignment.1[dist.c1 < dist.c2] = 'C1'
dist.c1 = e.dist(x.1, cx.1, y.1, cy.1)
dist.c2 = e.dist(x.1, cx.2, y.1, cy.2)
assignment.1[dist.c1 < dist.c2] = 'C1'
assignment.1 = c()
assignment.1[dist.c1 < dist.c2] = 'C1'
assignment.1
assignment.1[dist.c1 > dist.c2] = 'C2'
assignment.1
data.frame(assignment.1, x.1, y.1)
df.1 = data.frame(assignment.1, x.1, y.1)
df.1[assignment.1 = 'C2']
df.1[assignment.1 == 'C2']
df.1[assignment.1 == C2]
df.1[assignment.1 == 'C2']
df.1[assignment.1 = 'C2']
df.1['assignment.1' = 'C2']
df.1
df.1[1] = 'C1'
df.1[1 = 'C1']
df.1['assignment.1']
df.1[df.1['assignment.1'] = 'C2']
df.1[[df.1['assignment.1'] = 'C2']]
df.1[df.1['assignment.1' = 'C2']]
df.1['C2']
df.1[,'C2']
df.1[1:,'C2']
df.1['C2', ]
test.1 = df.1['assignment.1'] == 'C2'
df.1[test.1,]
test.1
df.1['assignment.1']
dist.c1 = e.dist(x.1, cx.1, y.1, cy.1)
dist.c2 = e.dist(x.1, cx.2, y.1, cy.2)
assignment.1 = c()
assignment.1[dist.c1 < dist.c2] = 'C1'
assignment.1[dist.c1 > dist.c2] = 'C2'
df.1 = data.frame(assignment.1, x.1, y.1)
df.1
test.1 = df.1[1] == 'C2'
df.1['assignment.1']
df.1[test.1, ]
test.1
df.1[test.1]
df.1
test.2 = df.1[test.1]
test.2
test.2[1]
type(test.2)
class(test.2)
df.1[test.2, ]
df.1[test.1, ]
c2.x = df.1[test.1, 'x.1']
c2.y = df.1[test.1, 'y.1']
plot(c2.x, c2.y)
# Plot Assignments to C1
df.2 = data.frame(assignment.1, x.1, y.1)
test.1 = df.1[1] == 'C1'
c2.x = df.1[test.1, 'x.1']
c2.y = df.1[test.1, 'y.1']
plot(c2.x, c2.y)
dist.c1 = e.dist(x.1, cx.1, y.1, cy.1)
dist.c1
dist.c2
df.t = data.frame(dist.c1)
df.t
df.t = data.frame(dist.c1, dist.c2)
df.t
plot(cx.1, cy.1)
plot(cx.2, cy.2)
# Create Your Own Kmeans Algorithm
rm(list = ls())
set.seed(7)
x.1 = runif(100, min = 0, max = 10)
y.1 = runif(100, min = 0, max = 10)
plot(x.1, y.1)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
cx.1 = c.x[1]
cy.1 = c.y[1]
plot(cx.1, cy.1)
# Centroid 2
cx.2 = c.x[2]
cy.2 = c.y[2]
set.seed(7)
x.1 = runif(100, min = 0, max = 10)
set.seed(7)
x.1 = runif(100, min = 0, max = 10)
y.1 = runif(100, min = 0, max = 10)
plot(x.1, y.1)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
cx.1 = c.x[1]
cy.1 = c.y[1]
plot(cx.1, cy.1)
cx.1
# Centroid 2
cx.2 = c.x[2]
cy.2 = c.y[2]
plot(cx.2, cy.2)
c.x
c.y
plot(c.x, c.y)
plot(x.1, y.1)
# Create DataFrame with X & Y Values
df.1 = data.frame(x.1, y.1)
p <- ggplot(df.1, aes(x = x.1, y = y.1))
# Create Your Own Kmeans Algorithm
rm(list=ls())
# Import Libraries
library(ggplot2)
# Step 1:  Generate two random datasets (R2)
set.seed(7)
x.1 = runif(100, min = 0, max = 10)
y.1 = runif(100, min = 0, max = 10)
plot(x.1, y.1)
# Create DataFrame with X & Y Values
df.1 = data.frame(x.1, y.1)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
cx.1 = c.x[1]
cy.1 = c.y[1]
plot(c.x, c.y)
# Centroid 2
cx.2 = c.x[2]
cy.2 = c.y[2]
plot(cx.2, cy.2)
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = x.1, y = y.1))
p
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = x.1, y = y.1)) + geom_point()
p
df.2 = data.frame(cx.1, cy.1)
df.2 = data.frame(cx.1, cy.1)
df.3 = data.frame(cx.2, cy.2)
p + geom_point(df.2, colour = 'red', size = 10)
p + geom_point(df.2, aes(x = cx.1, y = cy.1), colour = 'red', size = 10)
p + geom_point(df.2, aes(x = cx.1, y = cy.1))
df.2 = data.frame(cx.1, cy.1)
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = x.1, y = y.1)) + geom_point()
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1))
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red')
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =10)
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5)
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5) + geom_text('C1')
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5) + geom_text(label = 'C1')
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5, label = 'C1')
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5, label = 'C1')
p <- ggplot(df.1, aes(x = x.1, y = y.1)) + geom_point()
p + geom_point(data = df.2, aes(x = cx.1, y = cy.1), colour = 'red', size =5) +
geom_point(data = df.3, aes(x = cx.2, y = cy.2), colour = 'blue', size =5)
a = (x2 - x1)^2
b = (y2 - y1)^2
c = sqrt(a + b)
a = (x2 - x1)^2
b = (y2 - y1)^2
e.distance <- function(x1, y1, x2, y2){
a = (x2 - x1)^2
b = (y2 - y1)^2
c = sqrt(a + b)
return(c)
}
e.dist.c1 = e.distance(x.1, cx.1, y.1, cy.1)
e.dist.c1
e.dist.c1 = e.distance(cx.1, x.1, cy.1, y.1)
e.dist.c1
e.dist.c2 = e.distance(cx.2, x.1, cy.2, y.1)
# Create DataFrame w/ x/y points, distance to c1, c2
df.1 = data.frame(x.1, y.1, e.dist.c1, e.dist.c2)
df.1
# Create DataFrame w/ x/y points, distance to c1, c2
comp.dist = e.dist.c1 > e.dist.c2
df.1 = data.frame(x.1, y.1, e.dist.c1, e.dist.c2, comp.dist)
df.1
e.distance <- function(p.x, c.x, p.y, c.y){
'p.x/p.y:  Randomly generated x/y points
c.x/c.y:  Centroid x & y coordinates'
a = (p.x - c.x)^2
b = (p.y - c.y)^2
c = sqrt(a + b)
return(c)
}
# Clear Namespace
rm(list=ls())
# Import Libraries
library(ggplot2)
# Import Libraries
library(ggplot2)
# Step 1:  Generate two random datasets (R2)
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
# Create DataFrame with X & Y Values
df.1 = data.frame(x.1, y.1)
# Create DataFrame with X & Y Values
df.1 = data.frame(p.x, p.y)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
c.x
c.y
# Centroid 1
cx.1 = c.x[1]
cy.1 = c.y[1]
df.2 = data.frame(cx.1, cy.1)
plot(c.x, c.y)
# Create DataFrame with X & Y Values
df.pxy = data.frame(p.x, p.y)
df.c1.xy
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
c1.x = c.x[1]
c1.y. = c.y[1]
# Centroid 2
c2.x = c.x[2]
c2.y = c.y[2]
df.c1 = data.frame(c1.x, c1.y)
c1.y = c.y[1]
df.c1 = data.frame(c1.x, c1.y)
df.c2 = data.frame(c2.x, c2.y)
p <- ggplot(df.1, aes(x = x.1, y = y.1)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
p <- ggplot(df.1, aes(x = p.x, y = p.y)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
# Clear Namespace
rm(list=ls())
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
df.pxy = data.frame(p.x, p.y)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
c1.x = c.x[1]
c1.y = c.y[1]
df.c1 = data.frame(c1.x, c1.y)
# Centroid 2
c2.x = c.x[2]
c2.y = c.y[2]
df.c2 = data.frame(c2.x, c2.y)
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = p.x, y = p.y)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
# Plot Random Data + Centroids
p <- ggplot(df.1, aes(x = p.x, y = p.y)) + geom_point()
# Plot Random Data + Centroids
p <- ggplot(df.pxy, aes(x = p.x, y = p.y)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
e.distance <- function(p.x, c.x, p.y, c.y){
'p.x/p.y:  Randomly generated x/y points
c.x/c.y:  Centroid x & y coordinates'
a = (p.x - c.x)^2
b = (p.y - c.y)^2
c = sqrt(a + b)
return(c)
}
e.distance <- function(p.x, p.y, c.x, c.y){
'p.x/p.y:  Randomly generated x/y points
c.x/c.y:  Centroid x & y coordinates'
a = (p.x - c.x)^2
b = (p.y - c.y)^2
c = sqrt(a + b)
return(c)
}
e.dist.c1 = e.distance(p.x, p.y, c1.x, c1.y)
e.dist.c1 = e.distance(p.x, p.y, c1.x, c1.y)
e.dist.c2 = e.distance(p.x, p.y, c2.x, c2.y)
# Create DataFrame w/ x/y points, distance to c1, c2
comp.dist = e.dist.c1 > e.dist.c2
df.comp = data.frame(x.1, y.1, e.dist.c1, e.dist.c2, comp.dist)
df.comp = data.frame(p.x, p.y, e.dist.c1, e.dist.c2, comp.dist)
df.comp
comp.dist.true = c()
test.1 = df.comp[comp.dist] == TRUE
test.1 = df.comp['comp.dist'] == TRUE
test.1
df.comp
df.comp['comp.dist' == TRUE]
# Create DataFrame w/ x/y points, distance to c1, c2
comp.dist = e.dist.c1 > e.dist.c2
df.comp = data.frame(p.x, p.y, e.dist.c1, e.dist.c2, comp.dist)
df.comp[comp.dist]
df.comp['comp.dist']
df.comp['comp.dist'] = TRUE <- 'C2'
df.comp['comp.dist'] == TRUE <- 'C2'
df.comp['comp.dist' == TRUE] <- 'C2'
df.comp
df.comp['comp.dist' == TRUE] <- 'C2'
df.comp
test = df.comp['comp.dist' == TRUE] <- 'C2'
test
df.comp[comp.dist] = TRUE
df.comp['comp.dist'] == TRUE
df.comp
df.comp['new'] <- 'C2' if df.com['comp.dist' == TRUE]
df.comp['new'] <- 'C2' if (df.com['comp.dist' == TRUE])
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C1'
df.comp
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C2'
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C1'
df.comp
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C2'
df.comp$comp.dist[df.comp$comp.dist == FALSE] <- 'C1'
df.comp
# Clear Namespace
rm(list=ls())
# Import Libraries
library(ggplot2)
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
# Create DataFrame with X & Y Values
df.pxy = data.frame(p.x, p.y)
# Randomly Generate K Centroids
K.1 = 2
c.x = runif(K.1, min = 0, max = 10)
c.y = runif(K.1, min = 0, max = 10)
# Centroid 1
c1.x = c.x[1]
c1.y = c.y[1]
df.c1 = data.frame(c1.x, c1.y)
# Centroid 2
c2.x = c.x[2]
c2.y = c.y[2]
df.c2 = data.frame(c2.x, c2.y)
# Plot Random Data + Centroids
p <- ggplot(df.pxy, aes(x = p.x, y = p.y)) + geom_point()
p + geom_point(data = df.c1, aes(x = c1.x, y = c2.y), colour = 'red', size =5) +
geom_point(data = df.c2, aes(x = c2.x, y = c2.y), colour = 'blue', size =5)
# Calculate Euclidean Distance to Each Centroid
e.distance <- function(p.x, p.y, c.x, c.y){
'p.x/p.y:  Randomly generated x/y points
c.x/c.y:  Centroid x & y coordinates'
a = (p.x - c.x)^2
b = (p.y - c.y)^2
c = sqrt(a + b)
return(c)
}
e.dist.c1 = e.distance(p.x, p.y, c1.x, c1.y)
e.dist.c2 = e.distance(p.x, p.y, c2.x, c2.y)
# Create DataFrame w/ x/y points, distance to c1, c2
comp.dist = e.dist.c1 > e.dist.c2
df.comp = data.frame(p.x, p.y, e.dist.c1, e.dist.c2, comp.dist)
df.comp
df.comp$comp.dist[df.comp$comp.dist == TRUE] <- 'C2'
df.comp$comp.dist[df.comp$comp.dist == FALSE] <- 'C1'
df.comp
p <- ggplot(df.comp[df.comp$comp.dist == 'C1'], aes(x = p.x, y = p.y)) + geom_point()
p <- ggplot(df.comp[df.comp$comp.dist == 'C1'], aes(x = p.x, y = p.y)) + geom_point()
# Clear Namespace
rm(list=ls())
# Import Libraries
library(ggplot2)
rm(list=ls())
# Import Libraries
library(ggplot2)
# Step 1:  Generate two random datasets (R2)
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
# Create DataFrame with X & Y Values
df.pxy = data.frame(p.x, p.y)
plot(df.pxy)
# Centroid 1
c1.x = runif(1, min = 5, max = 10)
c1.y = runif(1, min = 5, max = 10)
df.c1 = data.frame(c1.x, c1.y)
df.c1
# Centroid 2
c2.x = runif(1, min = 0, max = 5)
c2.y = runif(1, min = 0, max = 5)
df.c2 = data.frame(c2.x, c2.y)
df.c2
rm(list=ls())
# Import Libraries
library(ggplot2)
# Step 1:  Generate A Random Dataset
set.seed(7)
p.x = runif(100, min = 0, max = 10)
p.y = runif(100, min = 0, max = 10)
plot(p.x, p.y)
# Create DataFrame with X & Y Values
df.pxy = data.frame(p.x, p.y)
plot(df.pxy)
head(df.pxy)
list.files()
getwd()
getwd()
setwd('C:\\Users\\Chris.Cirelli\\Desktop\\Programming_Repositories\\Clustering_Algorithms\\Data')
list.files()
# Clear Namespace
rm(list=ls())
sf_data <- read.csv('sf_data_06052019.csv')
head(sf_data)
# Load Libraries
library(dplyr)
head(sf_data)
sf_data_lim <- select(sf_data, Annual.Revenue)
head(sf_data_lim)
colnames(sf_data)
sf_data_lim <- select(sf_data, Annual.Revenue, Employeees, Type, Stage)
sf_data_lim <- select(sf_data, Annual.Revenue, Employees, Type, Stage)
sf_data_lim <- select(sf_data, Annual.Revenue, Employees, Submission.Type, Stage)
head(sf_data_lim)
sf_data_lim.1 <- select(sf_data, Annual.Revenue, Employees, Submission.Type, Stage)
# Limit Data - Values
lim.stage <- sf_data_lim$Stage == c('Declined', 'Bound')
# Limit Data - Values
lim.stage <- sf_data_lim$Stage == 'Declined' or 'Bound'
# Limit Data - Values
lim.stage <- sf_data_lim$Stage == 'Declined' && 'Bound'
# Limit Data - Values
lim.stage <- sf_data_lim$Stage == 'Declined'
# Limit Data - Values
lim.stage <- sf_data_lim$Stage == 'Declined' & 'Bound'
# Limit Data - Values
lim.stage <- sf_data_lim$Stage == 'Declined' && 'Bound'
# Load Libraries
library(tidyverse)
install.packages(tidyverse)
install.packages('tidyverse')
# Load Libraries
library(tidyverse)
# Limit Data - Values
lim.stage <- filter(sf_data_lim$Stage == 'Bound'
# Limit Data - Values
lim.stage <- filter(sf_data_lim$Stage == 'Bound')
# Limit Data - Values
lim.stage <- filter(sf_data_lim.Stage == 'Bound')
# Limit Data - Values
lim.stage <- filter(sf_data_lim == 'Bound')
# Limit Data - Values
lim.stage %>% filter(sf_data_lim$Stage == 'Bound')
# Limit Data - Values
sf_data_lim.1 %>% filter(Stage == 'Bound')
?diff
# Practice Pipe Operator
x <- c(1,2,3,4,5)
x
x %>% sqrt()
x %>% sqrt() %>% round()
x %>% sqrt() %>% round(, 2)
x %>% sqrt() %>% round(, 2)
x %>% sqrt() %>% round(x, 2)
x %>% sqrt() %>% round(2)
x
test <- x %>% sqrt() %>% round(2)
test
?abs
